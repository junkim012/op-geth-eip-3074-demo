/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface HSCompoundInterface extends utils.Interface {
  functions: {
    "CETH_ADDRESS()": FunctionFragment;
    "COMPTROLLER()": FunctionFragment;
    "COMP_ADDRESS()": FunctionFragment;
    "FCOMPOUND_ACTIONS()": FunctionFragment;
    "MSG_SENDER_KEY()": FunctionFragment;
    "NATIVE_TOKEN_ADDRESS()": FunctionFragment;
    "PERCENTAGE_BASE()": FunctionFragment;
    "POSTPROCESS_SIG()": FunctionFragment;
    "borrow(address,address,address,uint256,uint256,bool)": FunctionFragment;
    "cache(bytes32)": FunctionFragment;
    "claimComp(address)": FunctionFragment;
    "deposit(address,address,uint256)": FunctionFragment;
    "enterMarket(address,address)": FunctionFragment;
    "enterMarkets(address,address[])": FunctionFragment;
    "exitMarket(address,address)": FunctionFragment;
    "getContractName()": FunctionFragment;
    "postProcess()": FunctionFragment;
    "repayBorrow(address,address,address,uint256,uint256)": FunctionFragment;
    "stack(uint256)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CETH_ADDRESS"
      | "COMPTROLLER"
      | "COMP_ADDRESS"
      | "FCOMPOUND_ACTIONS"
      | "MSG_SENDER_KEY"
      | "NATIVE_TOKEN_ADDRESS"
      | "PERCENTAGE_BASE"
      | "POSTPROCESS_SIG"
      | "borrow"
      | "cache"
      | "claimComp"
      | "deposit"
      | "enterMarket"
      | "enterMarkets"
      | "exitMarket"
      | "getContractName"
      | "postProcess"
      | "repayBorrow"
      | "stack"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMP_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FCOMPOUND_ACTIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MSG_SENDER_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NATIVE_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POSTPROCESS_SIG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cache",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimComp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarkets",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exitMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postProcess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stack",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "CETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMP_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FCOMPOUND_ACTIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MSG_SENDER_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NATIVE_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POSTPROCESS_SIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cache", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimComp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface HSCompound extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HSCompoundInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    COMPTROLLER(overrides?: CallOverrides): Promise<[string]>;

    COMP_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    FCOMPOUND_ACTIONS(overrides?: CallOverrides): Promise<[string]>;

    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<[string]>;

    NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      dsProxy: PromiseOrValue<string>,
      cTokenIn: PromiseOrValue<string>,
      cTokenBorrow: PromiseOrValue<string>,
      cAmountIn: PromiseOrValue<BigNumberish>,
      uBorrowAmount: PromiseOrValue<BigNumberish>,
      needEnterMarket: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claimComp(
      dsProxy: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      dsProxy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterMarket(
      dsProxy: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterMarkets(
      dsProxy: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitMarket(
      dsProxy: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getContractName(overrides?: CallOverrides): Promise<[string]>;

    postProcess(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayBorrow(
      dsProxy: PromiseOrValue<string>,
      cTokenRepay: PromiseOrValue<string>,
      cTokenWithdraw: PromiseOrValue<string>,
      uRepayAmount: PromiseOrValue<BigNumberish>,
      cWithdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stack(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdraw(
      dsProxy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  COMPTROLLER(overrides?: CallOverrides): Promise<string>;

  COMP_ADDRESS(overrides?: CallOverrides): Promise<string>;

  FCOMPOUND_ACTIONS(overrides?: CallOverrides): Promise<string>;

  MSG_SENDER_KEY(overrides?: CallOverrides): Promise<string>;

  NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  PERCENTAGE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  POSTPROCESS_SIG(overrides?: CallOverrides): Promise<string>;

  borrow(
    dsProxy: PromiseOrValue<string>,
    cTokenIn: PromiseOrValue<string>,
    cTokenBorrow: PromiseOrValue<string>,
    cAmountIn: PromiseOrValue<BigNumberish>,
    uBorrowAmount: PromiseOrValue<BigNumberish>,
    needEnterMarket: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cache(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  claimComp(
    dsProxy: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    dsProxy: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterMarket(
    dsProxy: PromiseOrValue<string>,
    cToken: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterMarkets(
    dsProxy: PromiseOrValue<string>,
    cTokens: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitMarket(
    dsProxy: PromiseOrValue<string>,
    cToken: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getContractName(overrides?: CallOverrides): Promise<string>;

  postProcess(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayBorrow(
    dsProxy: PromiseOrValue<string>,
    cTokenRepay: PromiseOrValue<string>,
    cTokenWithdraw: PromiseOrValue<string>,
    uRepayAmount: PromiseOrValue<BigNumberish>,
    cWithdrawAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stack(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  withdraw(
    dsProxy: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    COMPTROLLER(overrides?: CallOverrides): Promise<string>;

    COMP_ADDRESS(overrides?: CallOverrides): Promise<string>;

    FCOMPOUND_ACTIONS(overrides?: CallOverrides): Promise<string>;

    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<string>;

    NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<string>;

    borrow(
      dsProxy: PromiseOrValue<string>,
      cTokenIn: PromiseOrValue<string>,
      cTokenBorrow: PromiseOrValue<string>,
      cAmountIn: PromiseOrValue<BigNumberish>,
      uBorrowAmount: PromiseOrValue<BigNumberish>,
      needEnterMarket: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    cache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    claimComp(
      dsProxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      dsProxy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    enterMarket(
      dsProxy: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    enterMarkets(
      dsProxy: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    exitMarket(
      dsProxy: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getContractName(overrides?: CallOverrides): Promise<string>;

    postProcess(overrides?: CallOverrides): Promise<void>;

    repayBorrow(
      dsProxy: PromiseOrValue<string>,
      cTokenRepay: PromiseOrValue<string>,
      cTokenWithdraw: PromiseOrValue<string>,
      uRepayAmount: PromiseOrValue<BigNumberish>,
      cWithdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stack(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    withdraw(
      dsProxy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    CETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    COMPTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    COMP_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    FCOMPOUND_ACTIONS(overrides?: CallOverrides): Promise<BigNumber>;

    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      dsProxy: PromiseOrValue<string>,
      cTokenIn: PromiseOrValue<string>,
      cTokenBorrow: PromiseOrValue<string>,
      cAmountIn: PromiseOrValue<BigNumberish>,
      uBorrowAmount: PromiseOrValue<BigNumberish>,
      needEnterMarket: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimComp(
      dsProxy: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      dsProxy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterMarket(
      dsProxy: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterMarkets(
      dsProxy: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitMarket(
      dsProxy: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getContractName(overrides?: CallOverrides): Promise<BigNumber>;

    postProcess(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayBorrow(
      dsProxy: PromiseOrValue<string>,
      cTokenRepay: PromiseOrValue<string>,
      cTokenWithdraw: PromiseOrValue<string>,
      uRepayAmount: PromiseOrValue<BigNumberish>,
      cWithdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stack(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      dsProxy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CETH_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COMPTROLLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COMP_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FCOMPOUND_ACTIONS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NATIVE_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      dsProxy: PromiseOrValue<string>,
      cTokenIn: PromiseOrValue<string>,
      cTokenBorrow: PromiseOrValue<string>,
      cAmountIn: PromiseOrValue<BigNumberish>,
      uBorrowAmount: PromiseOrValue<BigNumberish>,
      needEnterMarket: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimComp(
      dsProxy: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      dsProxy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterMarket(
      dsProxy: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterMarkets(
      dsProxy: PromiseOrValue<string>,
      cTokens: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitMarket(
      dsProxy: PromiseOrValue<string>,
      cToken: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getContractName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postProcess(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayBorrow(
      dsProxy: PromiseOrValue<string>,
      cTokenRepay: PromiseOrValue<string>,
      cTokenWithdraw: PromiseOrValue<string>,
      uRepayAmount: PromiseOrValue<BigNumberish>,
      cWithdrawAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stack(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      dsProxy: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
