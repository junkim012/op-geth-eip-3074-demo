/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface IDepositManagerInterface extends utils.Interface {
  functions: {
    "depositERC20ForUser(address,address,uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "depositERC20ForUser"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositERC20ForUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositERC20ForUser",
    data: BytesLike
  ): Result;

  events: {
    "NewDepositBlock(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewDepositBlock"): EventFragment;
}

export interface NewDepositBlockEventObject {
  owner: string;
  token: string;
  amountOrNFTId: BigNumber;
  depositBlockId: BigNumber;
}
export type NewDepositBlockEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  NewDepositBlockEventObject
>;

export type NewDepositBlockEventFilter = TypedEventFilter<NewDepositBlockEvent>;

export interface IDepositManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDepositManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositERC20ForUser(
      _token: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  depositERC20ForUser(
    _token: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositERC20ForUser(
      _token: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewDepositBlock(address,address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amountOrNFTId?: null,
      depositBlockId?: null
    ): NewDepositBlockEventFilter;
    NewDepositBlock(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amountOrNFTId?: null,
      depositBlockId?: null
    ): NewDepositBlockEventFilter;
  };

  estimateGas: {
    depositERC20ForUser(
      _token: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositERC20ForUser(
      _token: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
