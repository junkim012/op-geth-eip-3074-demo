/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, Signer, utils } from "ethers";

export interface IPredicateInterface extends utils.Interface {
  functions: {};

  events: {
    "LockedERC20(address,address,address,uint256)": EventFragment;
    "LockedEther(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LockedERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedEther"): EventFragment;
}

export interface LockedERC20EventObject {
  depositor: string;
  depositReceiver: string;
  rootToken: string;
  amount: BigNumber;
}
export type LockedERC20Event = TypedEvent<
  [string, string, string, BigNumber],
  LockedERC20EventObject
>;

export type LockedERC20EventFilter = TypedEventFilter<LockedERC20Event>;

export interface LockedEtherEventObject {
  depositor: string;
  depositReceiver: string;
  amount: BigNumber;
}
export type LockedEtherEvent = TypedEvent<
  [string, string, BigNumber],
  LockedEtherEventObject
>;

export type LockedEtherEventFilter = TypedEventFilter<LockedEtherEvent>;

export interface IPredicate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPredicateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "LockedERC20(address,address,address,uint256)"(
      depositor?: PromiseOrValue<string> | null,
      depositReceiver?: PromiseOrValue<string> | null,
      rootToken?: PromiseOrValue<string> | null,
      amount?: null
    ): LockedERC20EventFilter;
    LockedERC20(
      depositor?: PromiseOrValue<string> | null,
      depositReceiver?: PromiseOrValue<string> | null,
      rootToken?: PromiseOrValue<string> | null,
      amount?: null
    ): LockedERC20EventFilter;

    "LockedEther(address,address,uint256)"(
      depositor?: PromiseOrValue<string> | null,
      depositReceiver?: PromiseOrValue<string> | null,
      amount?: null
    ): LockedEtherEventFilter;
    LockedEther(
      depositor?: PromiseOrValue<string> | null,
      depositReceiver?: PromiseOrValue<string> | null,
      amount?: null
    ): LockedEtherEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
