/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface HMakerInterface extends utils.Interface {
  functions: {
    "CHAIN_LOG()": FunctionFragment;
    "DAI_TOKEN()": FunctionFragment;
    "MSG_SENDER_KEY()": FunctionFragment;
    "NATIVE_TOKEN_ADDRESS()": FunctionFragment;
    "PERCENTAGE_BASE()": FunctionFragment;
    "POSTPROCESS_SIG()": FunctionFragment;
    "PROXY_REGISTRY()": FunctionFragment;
    "cache(bytes32)": FunctionFragment;
    "draw(address,uint256,uint256)": FunctionFragment;
    "freeETH(address,uint256,uint256)": FunctionFragment;
    "freeGem(address,uint256,uint256)": FunctionFragment;
    "getCdpManager()": FunctionFragment;
    "getContractName()": FunctionFragment;
    "getMcdJug()": FunctionFragment;
    "getProxyActions()": FunctionFragment;
    "openLockETHAndDraw(uint256,address,address,bytes32,uint256)": FunctionFragment;
    "openLockGemAndDraw(address,address,bytes32,uint256,uint256)": FunctionFragment;
    "postProcess()": FunctionFragment;
    "safeLockETH(uint256,address,uint256)": FunctionFragment;
    "safeLockGem(address,uint256,uint256)": FunctionFragment;
    "stack(uint256)": FunctionFragment;
    "wipe(address,uint256,uint256)": FunctionFragment;
    "wipeAll(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CHAIN_LOG"
      | "DAI_TOKEN"
      | "MSG_SENDER_KEY"
      | "NATIVE_TOKEN_ADDRESS"
      | "PERCENTAGE_BASE"
      | "POSTPROCESS_SIG"
      | "PROXY_REGISTRY"
      | "cache"
      | "draw"
      | "freeETH"
      | "freeGem"
      | "getCdpManager"
      | "getContractName"
      | "getMcdJug"
      | "getProxyActions"
      | "openLockETHAndDraw"
      | "openLockGemAndDraw"
      | "postProcess"
      | "safeLockETH"
      | "safeLockGem"
      | "stack"
      | "wipe"
      | "wipeAll"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "CHAIN_LOG", values?: undefined): string;
  encodeFunctionData(functionFragment: "DAI_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MSG_SENDER_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NATIVE_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POSTPROCESS_SIG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROXY_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cache",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "draw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "freeETH",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "freeGem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCdpManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMcdJug", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProxyActions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openLockETHAndDraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openLockGemAndDraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "postProcess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeLockETH",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeLockGem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stack",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "wipe",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wipeAll",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "CHAIN_LOG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DAI_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MSG_SENDER_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NATIVE_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POSTPROCESS_SIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROXY_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cache", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "draw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeGem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCdpManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMcdJug", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProxyActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLockETHAndDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openLockGemAndDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeLockETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeLockGem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wipe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wipeAll", data: BytesLike): Result;

  events: {};
}

export interface HMaker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HMakerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CHAIN_LOG(overrides?: CallOverrides): Promise<[string]>;

    DAI_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<[string]>;

    NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<[string]>;

    PROXY_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    cache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    draw(
      daiJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    freeETH(
      ethJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    freeGem(
      gemJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCdpManager(overrides?: CallOverrides): Promise<[string]>;

    getContractName(overrides?: CallOverrides): Promise<[string]>;

    getMcdJug(overrides?: CallOverrides): Promise<[string]>;

    getProxyActions(overrides?: CallOverrides): Promise<[string]>;

    openLockETHAndDraw(
      value: PromiseOrValue<BigNumberish>,
      ethJoin: PromiseOrValue<string>,
      daiJoin: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      wadD: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openLockGemAndDraw(
      gemJoin: PromiseOrValue<string>,
      daiJoin: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      wadC: PromiseOrValue<BigNumberish>,
      wadD: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    postProcess(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeLockETH(
      value: PromiseOrValue<BigNumberish>,
      ethJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeLockGem(
      gemJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stack(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    wipe(
      daiJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wipeAll(
      daiJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CHAIN_LOG(overrides?: CallOverrides): Promise<string>;

  DAI_TOKEN(overrides?: CallOverrides): Promise<string>;

  MSG_SENDER_KEY(overrides?: CallOverrides): Promise<string>;

  NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  PERCENTAGE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  POSTPROCESS_SIG(overrides?: CallOverrides): Promise<string>;

  PROXY_REGISTRY(overrides?: CallOverrides): Promise<string>;

  cache(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  draw(
    daiJoin: PromiseOrValue<string>,
    cdp: PromiseOrValue<BigNumberish>,
    wad: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  freeETH(
    ethJoin: PromiseOrValue<string>,
    cdp: PromiseOrValue<BigNumberish>,
    wad: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  freeGem(
    gemJoin: PromiseOrValue<string>,
    cdp: PromiseOrValue<BigNumberish>,
    wad: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCdpManager(overrides?: CallOverrides): Promise<string>;

  getContractName(overrides?: CallOverrides): Promise<string>;

  getMcdJug(overrides?: CallOverrides): Promise<string>;

  getProxyActions(overrides?: CallOverrides): Promise<string>;

  openLockETHAndDraw(
    value: PromiseOrValue<BigNumberish>,
    ethJoin: PromiseOrValue<string>,
    daiJoin: PromiseOrValue<string>,
    ilk: PromiseOrValue<BytesLike>,
    wadD: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openLockGemAndDraw(
    gemJoin: PromiseOrValue<string>,
    daiJoin: PromiseOrValue<string>,
    ilk: PromiseOrValue<BytesLike>,
    wadC: PromiseOrValue<BigNumberish>,
    wadD: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  postProcess(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeLockETH(
    value: PromiseOrValue<BigNumberish>,
    ethJoin: PromiseOrValue<string>,
    cdp: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeLockGem(
    gemJoin: PromiseOrValue<string>,
    cdp: PromiseOrValue<BigNumberish>,
    wad: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stack(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  wipe(
    daiJoin: PromiseOrValue<string>,
    cdp: PromiseOrValue<BigNumberish>,
    wad: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wipeAll(
    daiJoin: PromiseOrValue<string>,
    cdp: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CHAIN_LOG(overrides?: CallOverrides): Promise<string>;

    DAI_TOKEN(overrides?: CallOverrides): Promise<string>;

    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<string>;

    NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<string>;

    PROXY_REGISTRY(overrides?: CallOverrides): Promise<string>;

    cache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    draw(
      daiJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    freeETH(
      ethJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    freeGem(
      gemJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCdpManager(overrides?: CallOverrides): Promise<string>;

    getContractName(overrides?: CallOverrides): Promise<string>;

    getMcdJug(overrides?: CallOverrides): Promise<string>;

    getProxyActions(overrides?: CallOverrides): Promise<string>;

    openLockETHAndDraw(
      value: PromiseOrValue<BigNumberish>,
      ethJoin: PromiseOrValue<string>,
      daiJoin: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      wadD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLockGemAndDraw(
      gemJoin: PromiseOrValue<string>,
      daiJoin: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      wadC: PromiseOrValue<BigNumberish>,
      wadD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postProcess(overrides?: CallOverrides): Promise<void>;

    safeLockETH(
      value: PromiseOrValue<BigNumberish>,
      ethJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeLockGem(
      gemJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stack(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    wipe(
      daiJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    wipeAll(
      daiJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    CHAIN_LOG(overrides?: CallOverrides): Promise<BigNumber>;

    DAI_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    PROXY_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    cache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    draw(
      daiJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    freeETH(
      ethJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    freeGem(
      gemJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCdpManager(overrides?: CallOverrides): Promise<BigNumber>;

    getContractName(overrides?: CallOverrides): Promise<BigNumber>;

    getMcdJug(overrides?: CallOverrides): Promise<BigNumber>;

    getProxyActions(overrides?: CallOverrides): Promise<BigNumber>;

    openLockETHAndDraw(
      value: PromiseOrValue<BigNumberish>,
      ethJoin: PromiseOrValue<string>,
      daiJoin: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      wadD: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openLockGemAndDraw(
      gemJoin: PromiseOrValue<string>,
      daiJoin: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      wadC: PromiseOrValue<BigNumberish>,
      wadD: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    postProcess(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeLockETH(
      value: PromiseOrValue<BigNumberish>,
      ethJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeLockGem(
      gemJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stack(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wipe(
      daiJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wipeAll(
      daiJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CHAIN_LOG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DAI_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NATIVE_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROXY_REGISTRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    draw(
      daiJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    freeETH(
      ethJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    freeGem(
      gemJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCdpManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMcdJug(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProxyActions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openLockETHAndDraw(
      value: PromiseOrValue<BigNumberish>,
      ethJoin: PromiseOrValue<string>,
      daiJoin: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      wadD: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openLockGemAndDraw(
      gemJoin: PromiseOrValue<string>,
      daiJoin: PromiseOrValue<string>,
      ilk: PromiseOrValue<BytesLike>,
      wadC: PromiseOrValue<BigNumberish>,
      wadD: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    postProcess(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeLockETH(
      value: PromiseOrValue<BigNumberish>,
      ethJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeLockGem(
      gemJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stack(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wipe(
      daiJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wipeAll(
      daiJoin: PromiseOrValue<string>,
      cdp: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
