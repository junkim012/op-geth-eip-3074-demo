/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface XHolasInterface extends utils.Interface {
  functions: {
    "MSG_SENDER_KEY()": FunctionFragment;
    "PERCENTAGE_BASE()": FunctionFragment;
    "POSTPROCESS_SIG()": FunctionFragment;
    "batchExec(address[],bytes32[],bytes[])": FunctionFragment;
    "cache(bytes32)": FunctionFragment;
    "execs(address[],bytes32[],bytes[])": FunctionFragment;
    "executeTransactionsEntryPoint(address[],bytes32[],uint16[],bytes[])": FunctionFragment;
    "executeTransactionsRelayPoint(bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stack(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePeerContract(uint16,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MSG_SENDER_KEY"
      | "PERCENTAGE_BASE"
      | "POSTPROCESS_SIG"
      | "batchExec"
      | "cache"
      | "execs"
      | "executeTransactionsEntryPoint"
      | "executeTransactionsRelayPoint"
      | "owner"
      | "renounceOwnership"
      | "stack"
      | "transferOwnership"
      | "updatePeerContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MSG_SENDER_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POSTPROCESS_SIG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchExec",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cache",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "execs",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransactionsEntryPoint",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransactionsRelayPoint",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stack",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePeerContract",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MSG_SENDER_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POSTPROCESS_SIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchExec", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cache", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeTransactionsEntryPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransactionsRelayPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePeerContract",
    data: BytesLike
  ): Result;

  events: {
    "BridgeReceivedLog(address,uint8,uint256,address,uint16,bytes32,uint16,address)": EventFragment;
    "BridgeSentLog(uint16,address,address,uint256,bytes)": EventFragment;
    "Log(string)": EventFragment;
    "LogBegin(address,bytes4,bytes)": EventFragment;
    "LogEnd(address,bytes4,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RelayedTokenAddressLog(address)": EventFragment;
    "TokenTransferred(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgeReceivedLog"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeSentLog"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBegin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogEnd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayedTokenAddressLog"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenTransferred"): EventFragment;
}

export interface BridgeReceivedLogEventObject {
  wrappedAsset: string;
  payloadID: number;
  amount: BigNumber;
  tokenAddress: string;
  tokenChain: number;
  to: string;
  toChain: number;
  fromAddress: string;
}
export type BridgeReceivedLogEvent = TypedEvent<
  [string, number, BigNumber, string, number, string, number, string],
  BridgeReceivedLogEventObject
>;

export type BridgeReceivedLogEventFilter =
  TypedEventFilter<BridgeReceivedLogEvent>;

export interface BridgeSentLogEventObject {
  targetChainId: number;
  targetContractAddress: string;
  originTokenAddress: string;
  amount: BigNumber;
  payload: string;
}
export type BridgeSentLogEvent = TypedEvent<
  [number, string, string, BigNumber, string],
  BridgeSentLogEventObject
>;

export type BridgeSentLogEventFilter = TypedEventFilter<BridgeSentLogEvent>;

export interface LogEventObject {
  str: string;
}
export type LogEvent = TypedEvent<[string], LogEventObject>;

export type LogEventFilter = TypedEventFilter<LogEvent>;

export interface LogBeginEventObject {
  handler: string;
  selector: string;
  payload: string;
}
export type LogBeginEvent = TypedEvent<
  [string, string, string],
  LogBeginEventObject
>;

export type LogBeginEventFilter = TypedEventFilter<LogBeginEvent>;

export interface LogEndEventObject {
  handler: string;
  selector: string;
  result: string;
}
export type LogEndEvent = TypedEvent<
  [string, string, string],
  LogEndEventObject
>;

export type LogEndEventFilter = TypedEventFilter<LogEndEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RelayedTokenAddressLogEventObject {
  relayedTokenAddress: string;
}
export type RelayedTokenAddressLogEvent = TypedEvent<
  [string],
  RelayedTokenAddressLogEventObject
>;

export type RelayedTokenAddressLogEventFilter =
  TypedEventFilter<RelayedTokenAddressLogEvent>;

export interface TokenTransferredEventObject {
  receiver: string;
  amount: BigNumber;
}
export type TokenTransferredEvent = TypedEvent<
  [string, BigNumber],
  TokenTransferredEventObject
>;

export type TokenTransferredEventFilter =
  TypedEventFilter<TokenTransferredEvent>;

export interface XHolas extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XHolasInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<[string]>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<[string]>;

    batchExec(
      tos: PromiseOrValue<string>[],
      configs: PromiseOrValue<BytesLike>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    execs(
      tos: PromiseOrValue<string>[],
      configs: PromiseOrValue<BytesLike>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTransactionsEntryPoint(
      tos: PromiseOrValue<string>[],
      configs: PromiseOrValue<BytesLike>[],
      chainIds: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTransactionsRelayPoint(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stack(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePeerContract(
      peerChainId: PromiseOrValue<BigNumberish>,
      wormholeCompatAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MSG_SENDER_KEY(overrides?: CallOverrides): Promise<string>;

  PERCENTAGE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  POSTPROCESS_SIG(overrides?: CallOverrides): Promise<string>;

  batchExec(
    tos: PromiseOrValue<string>[],
    configs: PromiseOrValue<BytesLike>[],
    datas: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cache(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  execs(
    tos: PromiseOrValue<string>[],
    configs: PromiseOrValue<BytesLike>[],
    datas: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTransactionsEntryPoint(
    tos: PromiseOrValue<string>[],
    configs: PromiseOrValue<BytesLike>[],
    chainIds: PromiseOrValue<BigNumberish>[],
    datas: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTransactionsRelayPoint(
    encodedVm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stack(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePeerContract(
    peerChainId: PromiseOrValue<BigNumberish>,
    wormholeCompatAddress: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<string>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<string>;

    batchExec(
      tos: PromiseOrValue<string>[],
      configs: PromiseOrValue<BytesLike>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    cache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    execs(
      tos: PromiseOrValue<string>[],
      configs: PromiseOrValue<BytesLike>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeTransactionsEntryPoint(
      tos: PromiseOrValue<string>[],
      configs: PromiseOrValue<BytesLike>[],
      chainIds: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeTransactionsRelayPoint(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stack(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePeerContract(
      peerChainId: PromiseOrValue<BigNumberish>,
      wormholeCompatAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BridgeReceivedLog(address,uint8,uint256,address,uint16,bytes32,uint16,address)"(
      wrappedAsset?: null,
      payloadID?: null,
      amount?: null,
      tokenAddress?: null,
      tokenChain?: null,
      to?: null,
      toChain?: null,
      fromAddress?: null
    ): BridgeReceivedLogEventFilter;
    BridgeReceivedLog(
      wrappedAsset?: null,
      payloadID?: null,
      amount?: null,
      tokenAddress?: null,
      tokenChain?: null,
      to?: null,
      toChain?: null,
      fromAddress?: null
    ): BridgeReceivedLogEventFilter;

    "BridgeSentLog(uint16,address,address,uint256,bytes)"(
      targetChainId?: null,
      targetContractAddress?: null,
      originTokenAddress?: null,
      amount?: null,
      payload?: null
    ): BridgeSentLogEventFilter;
    BridgeSentLog(
      targetChainId?: null,
      targetContractAddress?: null,
      originTokenAddress?: null,
      amount?: null,
      payload?: null
    ): BridgeSentLogEventFilter;

    "Log(string)"(str?: PromiseOrValue<string> | null): LogEventFilter;
    Log(str?: PromiseOrValue<string> | null): LogEventFilter;

    "LogBegin(address,bytes4,bytes)"(
      handler?: PromiseOrValue<string> | null,
      selector?: PromiseOrValue<BytesLike> | null,
      payload?: null
    ): LogBeginEventFilter;
    LogBegin(
      handler?: PromiseOrValue<string> | null,
      selector?: PromiseOrValue<BytesLike> | null,
      payload?: null
    ): LogBeginEventFilter;

    "LogEnd(address,bytes4,bytes)"(
      handler?: PromiseOrValue<string> | null,
      selector?: PromiseOrValue<BytesLike> | null,
      result?: null
    ): LogEndEventFilter;
    LogEnd(
      handler?: PromiseOrValue<string> | null,
      selector?: PromiseOrValue<BytesLike> | null,
      result?: null
    ): LogEndEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RelayedTokenAddressLog(address)"(
      relayedTokenAddress?: null
    ): RelayedTokenAddressLogEventFilter;
    RelayedTokenAddressLog(
      relayedTokenAddress?: null
    ): RelayedTokenAddressLogEventFilter;

    "TokenTransferred(address,uint256)"(
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenTransferredEventFilter;
    TokenTransferred(
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenTransferredEventFilter;
  };

  estimateGas: {
    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    batchExec(
      tos: PromiseOrValue<string>[],
      configs: PromiseOrValue<BytesLike>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execs(
      tos: PromiseOrValue<string>[],
      configs: PromiseOrValue<BytesLike>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTransactionsEntryPoint(
      tos: PromiseOrValue<string>[],
      configs: PromiseOrValue<BytesLike>[],
      chainIds: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTransactionsRelayPoint(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stack(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePeerContract(
      peerChainId: PromiseOrValue<BigNumberish>,
      wormholeCompatAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MSG_SENDER_KEY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENTAGE_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POSTPROCESS_SIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchExec(
      tos: PromiseOrValue<string>[],
      configs: PromiseOrValue<BytesLike>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cache(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execs(
      tos: PromiseOrValue<string>[],
      configs: PromiseOrValue<BytesLike>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTransactionsEntryPoint(
      tos: PromiseOrValue<string>[],
      configs: PromiseOrValue<BytesLike>[],
      chainIds: PromiseOrValue<BigNumberish>[],
      datas: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTransactionsRelayPoint(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stack(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePeerContract(
      peerChainId: PromiseOrValue<BigNumberish>,
      wormholeCompatAddress: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
