/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import * as Contracts from ".";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";
import { ethers } from "ethers";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "HAaveProtocolV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HAaveProtocolV2__factory>;
    getContractFactory(
      name: "IATokenV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IATokenV2__factory>;
    getContractFactory(
      name: "IFlashLoanReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoanReceiver__factory>;
    getContractFactory(
      name: "ILendingPoolAddressesProviderV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolAddressesProviderV2__factory>;
    getContractFactory(
      name: "ILendingPoolV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolV2__factory>;
    getContractFactory(
      name: "IStableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStableDebtToken__factory>;
    getContractFactory(
      name: "IVariableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVariableDebtToken__factory>;
    getContractFactory(
      name: "FCompoundActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FCompoundActions__factory>;
    getContractFactory(
      name: "HCEther",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HCEther__factory>;
    getContractFactory(
      name: "HComptroller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HComptroller__factory>;
    getContractFactory(
      name: "HCToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HCToken__factory>;
    getContractFactory(
      name: "HSCompound",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HSCompound__factory>;
    getContractFactory(
      name: "ICEther",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICEther__factory>;
    getContractFactory(
      name: "IComptroller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IComptroller__factory>;
    getContractFactory(
      name: "ICToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICToken__factory>;
    getContractFactory(
      name: "HCurve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HCurve__factory>;
    getContractFactory(
      name: "HCurveDao",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HCurveDao__factory>;
    getContractFactory(
      name: "ICurveHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurveHandler__factory>;
    getContractFactory(
      name: "ILiquidityGauge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidityGauge__factory>;
    getContractFactory(
      name: "IMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinter__factory>;
    getContractFactory(
      name: "IYToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYToken__factory>;
    getContractFactory(
      name: "HFunds",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HFunds__factory>;
    getContractFactory(
      name: "HandlerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HandlerBase__factory>;
    getContractFactory(
      name: "DSAuth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAuth__factory>;
    getContractFactory(
      name: "DSAuthEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAuthEvents__factory>;
    getContractFactory(
      name: "DSAuthority",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSAuthority__factory>;
    getContractFactory(
      name: "DSGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSGuard__factory>;
    getContractFactory(
      name: "DSGuardEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSGuardEvents__factory>;
    getContractFactory(
      name: "DSGuardFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSGuardFactory__factory>;
    getContractFactory(
      name: "HMaker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HMaker__factory>;
    getContractFactory(
      name: "IDSProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSProxy__factory>;
    getContractFactory(
      name: "IDSProxyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSProxyFactory__factory>;
    getContractFactory(
      name: "IDSProxyRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSProxyRegistry__factory>;
    getContractFactory(
      name: "IMakerChainLog",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMakerChainLog__factory>;
    getContractFactory(
      name: "IMakerGemJoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMakerGemJoin__factory>;
    getContractFactory(
      name: "IMakerManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMakerManager__factory>;
    getContractFactory(
      name: "IMakerVat",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMakerVat__factory>;
    getContractFactory(
      name: "HPolygon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HPolygon__factory>;
    getContractFactory(
      name: "IDepositManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDepositManager__factory>;
    getContractFactory(
      name: "IPredicate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPredicate__factory>;
    getContractFactory(
      name: "IRootChainManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRootChainManager__factory>;
    getContractFactory(
      name: "HSushiSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HSushiSwap__factory>;
    getContractFactory(
      name: "HUniswapV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HUniswapV2__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "HWeth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HWeth__factory>;
    getContractFactory(
      name: "IWETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH9__factory>;
    getContractFactory(
      name: "IDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSA__factory>;
    getContractFactory(
      name: "IERC20Usdt",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Usdt__factory>;
    getContractFactory(
      name: "IInstaEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInstaEngine__factory>;
    getContractFactory(
      name: "IInstaIndex",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInstaIndex__factory>;
    getContractFactory(
      name: "ITokenBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenBridge__factory>;
    getContractFactory(
      name: "IWormhole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWormhole__factory>;
    getContractFactory(
      name: "IxEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IxEngine__factory>;
    getContractFactory(
      name: "IxHolas",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IxHolas__factory>;
    getContractFactory(
      name: "IProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxy__factory>;
    getContractFactory(
      name: "Config",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Config__factory>;
    getContractFactory(
      name: "Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Storage__factory>;
    getContractFactory(
      name: "BridgeGetters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeGetters__factory>;
    getContractFactory(
      name: "ITokenBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenBridge__factory>;
    getContractFactory(
      name: "IWormhole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWormhole__factory>;
    getContractFactory(
      name: "PortalWrappedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PortalWrappedToken__factory>;
    getContractFactory(
      name: "XEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XEngine__factory>;
    getContractFactory(
      name: "XHolas",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.XHolas__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "HAaveProtocolV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HAaveProtocolV2>;
    getContractAt(
      name: "IATokenV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IATokenV2>;
    getContractAt(
      name: "IFlashLoanReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashLoanReceiver>;
    getContractAt(
      name: "ILendingPoolAddressesProviderV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolAddressesProviderV2>;
    getContractAt(
      name: "ILendingPoolV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolV2>;
    getContractAt(
      name: "IStableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStableDebtToken>;
    getContractAt(
      name: "IVariableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVariableDebtToken>;
    getContractAt(
      name: "FCompoundActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FCompoundActions>;
    getContractAt(
      name: "HCEther",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HCEther>;
    getContractAt(
      name: "HComptroller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HComptroller>;
    getContractAt(
      name: "HCToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HCToken>;
    getContractAt(
      name: "HSCompound",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HSCompound>;
    getContractAt(
      name: "ICEther",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICEther>;
    getContractAt(
      name: "IComptroller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IComptroller>;
    getContractAt(
      name: "ICToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICToken>;
    getContractAt(
      name: "HCurve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HCurve>;
    getContractAt(
      name: "HCurveDao",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HCurveDao>;
    getContractAt(
      name: "ICurveHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurveHandler>;
    getContractAt(
      name: "ILiquidityGauge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidityGauge>;
    getContractAt(
      name: "IMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinter>;
    getContractAt(
      name: "IYToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYToken>;
    getContractAt(
      name: "HFunds",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HFunds>;
    getContractAt(
      name: "HandlerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HandlerBase>;
    getContractAt(
      name: "DSAuth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAuth>;
    getContractAt(
      name: "DSAuthEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAuthEvents>;
    getContractAt(
      name: "DSAuthority",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSAuthority>;
    getContractAt(
      name: "DSGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSGuard>;
    getContractAt(
      name: "DSGuardEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSGuardEvents>;
    getContractAt(
      name: "DSGuardFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DSGuardFactory>;
    getContractAt(
      name: "HMaker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HMaker>;
    getContractAt(
      name: "IDSProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSProxy>;
    getContractAt(
      name: "IDSProxyFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSProxyFactory>;
    getContractAt(
      name: "IDSProxyRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSProxyRegistry>;
    getContractAt(
      name: "IMakerChainLog",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMakerChainLog>;
    getContractAt(
      name: "IMakerGemJoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMakerGemJoin>;
    getContractAt(
      name: "IMakerManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMakerManager>;
    getContractAt(
      name: "IMakerVat",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMakerVat>;
    getContractAt(
      name: "HPolygon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HPolygon>;
    getContractAt(
      name: "IDepositManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDepositManager>;
    getContractAt(
      name: "IPredicate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPredicate>;
    getContractAt(
      name: "IRootChainManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRootChainManager>;
    getContractAt(
      name: "HSushiSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HSushiSwap>;
    getContractAt(
      name: "HUniswapV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HUniswapV2>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "HWeth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HWeth>;
    getContractAt(
      name: "IWETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH9>;
    getContractAt(
      name: "IDSA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSA>;
    getContractAt(
      name: "IERC20Usdt",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Usdt>;
    getContractAt(
      name: "IInstaEngine",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInstaEngine>;
    getContractAt(
      name: "IInstaIndex",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInstaIndex>;
    getContractAt(
      name: "ITokenBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenBridge>;
    getContractAt(
      name: "IWormhole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWormhole>;
    getContractAt(
      name: "IxEngine",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IxEngine>;
    getContractAt(
      name: "IxHolas",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IxHolas>;
    getContractAt(
      name: "IProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxy>;
    getContractAt(
      name: "Config",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Config>;
    getContractAt(
      name: "Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Storage>;
    getContractAt(
      name: "BridgeGetters",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeGetters>;
    getContractAt(
      name: "ITokenBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenBridge>;
    getContractAt(
      name: "IWormhole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWormhole>;
    getContractAt(
      name: "PortalWrappedToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PortalWrappedToken>;
    getContractAt(
      name: "XEngine",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.XEngine>;
    getContractAt(
      name: "XHolas",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.XHolas>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
