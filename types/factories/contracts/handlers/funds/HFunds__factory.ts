/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../../common";
import type {
  HFunds,
  HFundsInterface,
} from "../../../../contracts/handlers/funds/HFunds";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "MSG_SENDER_KEY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NATIVE_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERCENTAGE_BASE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "POSTPROCESS_SIG",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "addFunds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "cache",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "checkSlippage",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "inject",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "postProcess",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "receiver",
        type: "address",
      },
    ],
    name: "send",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendEtherToMiner",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "sendToken",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "address payable",
        name: "receiver",
        type: "address",
      },
    ],
    name: "sendTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stack",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "updateTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506116c4806100206000396000f3fe60806040526004361061010e5760003560e01c8063d0797f84116100a5578063df2ebdbb11610074578063f5f5ba7211610059578063f5f5ba72146102a3578063f8b2cb4f146102d8578063fa2901a5146102eb57600080fd5b8063df2ebdbb14610250578063e64154d31461029057600080fd5b8063d0797f8414610113578063db71410e1461020a578063dc9031c41461021d578063de41691c1461023d57600080fd5b806381baf3ab116100e157806381baf3ab146101a657806387c13943146101b957806399eb59b9146101d5578063c27229161461020257600080fd5b80630ce7df36146101135780630f532d181461013c57806318248f2a1461017e578063785d04f514610193575b600080fd5b610126610121366004611228565b610337565b6040516101339190611294565b60405180910390f35b34801561014857600080fd5b506101707fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a81565b604051908152602001610133565b61019161018c3660046112ed565b61034e565b005b6101916101a136600461132f565b610379565b6101916101b436600461135f565b6103c6565b3480156101c557600080fd5b50610170670de0b6b3a764000081565b3480156101e157600080fd5b506101706101f03660046113e3565b60016020526000908152604090205481565b61019161053b565b610191610218366004611228565b610588565b34801561022957600080fd5b506101706102383660046113e3565b61086f565b61012661024b3660046113fc565b610890565b34801561025c57600080fd5b5061027873eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6040516001600160a01b039091168152602001610133565b61019161029e3660046113e3565b6109cc565b3480156102af57600080fd5b5060408051808201825260068152654846756e647360d01b60208201529051610133919061146a565b6101706102e636600461149d565b610a02565b3480156102f757600080fd5b50610306636139148b60e11b81565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610133565b606061034585858585610a10565b95945050505050565b6103588383610c42565b91508115610374576103746001600160a01b0384168284610d01565b505050565b610384600083610c42565b915081156103c2576040516001600160a01b0382169083156108fc029084906000818181858888f19350505050158015610374573d6000803e3d6000fd5b5050565b60005b8481101561053357600061041b8787848181106103e8576103e86114ba565b90506020020160208101906103fd919061149d565b86868581811061040f5761040f6114ba565b90506020020135610c42565b90508015610520576000878784818110610437576104376114ba565b905060200201602081019061044c919061149d565b6001600160a01b031614806104a3575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee878784818110610483576104836114ba565b9050602002016020810190610498919061149d565b6001600160a01b0316145b156104e4576040516001600160a01b0384169082156108fc029083906000818181858888f193505050501580156104de573d6000803e3d6000fd5b50610520565b61052083828989868181106104fb576104fb6114ba565b9050602002016020810190610510919061149d565b6001600160a01b03169190610d01565b508061052b816114e6565b9150506103c9565b505050505050565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c696420706f73742070726f6365737300000000000000000000000060448201526064015b60405180910390fd5b604080518082018252600d81526c636865636b536c69707061676560981b6020808301919091528251808401909352601d83527f746f6b656e20616e6420616d6f756e7420646f206e6f74206d61746368000000908301526105ee918584149190610d91565b60005b8381101561086857600085858381811061060d5761060d6114ba565b9050602002016020810190610622919061149d565b6001600160a01b031614156106b657828282818110610643576106436114ba565b905060200201354710156106b157600061065c82610da0565b61066547610da0565b604051602001610676929190611501565b60408051601f19818403018152828201909152600d82526c636865636b536c69707061676560981b602083015291506106af9082610eca565b505b610856565b8282828181106106c8576106c86114ba565b905060200201358585838181106106e1576106e16114ba565b90506020020160208101906106f6919061149d565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561073c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107609190611566565b101561085657600061077182610da0565b61080a878785818110610786576107866114ba565b905060200201602081019061079b919061149d565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156107e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108059190611566565b610da0565b60405160200161081b929190611501565b60408051601f19818403018152828201909152600d82526c636865636b536c69707061676560981b602083015291506108549082610eca565b505b80610860816114e6565b9150506105f1565b5050505050565b6000818154811061087f57600080fd5b600091825260209091200154905081565b606060008267ffffffffffffffff8111156108ad576108ad61157f565b6040519080825280602002602001820160405280156108d6578160200160208202803683370190505b50905060005b838110156109c25760008585838181106108f8576108f86114ba565b905060200201602081019061090d919061149d565b90506001600160a01b0381161580159061094457506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14155b1561098657600080546001810182559080526001600160a01b0382167f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563909101555b61099281600019610c42565b8383815181106109a4576109a46114ba565b602090810291909101015250806109ba816114e6565b9150506108dc565b5090505b92915050565b80156109ff57604051419082156108fc029083906000818181858888f193505050501580156103c2573d6000803e3d6000fd5b50565b60006109c682600019610c42565b604080518082018252600681527f696e6a65637400000000000000000000000000000000000000000000000000006020808301919091528251808401909352601f83527f746f6b656e20616e6420616d6f756e7420646f6573206e6f74206d617463680090830152606091610a889186851491610d91565b6000610adb7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60005260016020527fe066822ceb6294079ebca45035319f95ccb12306128dbdf5a257f0d1235733c95490565b905060008367ffffffffffffffff811115610af857610af861157f565b604051908082528060200260200182016040528015610b21578160200160208202803683370190505b50905060005b86811015610c3757610b858330888885818110610b4657610b466114ba565b905060200201358b8b86818110610b5f57610b5f6114ba565b9050602002016020810190610b74919061149d565b6001600160a01b0316929190610f21565b858582818110610b9757610b976114ba565b90506020020135828281518110610bb057610bb06114ba565b602002602001018181525050610c25888883818110610bd157610bd16114ba565b9050602002016020810190610be6919061149d565b600080546001810182559080526001600160a01b0382167f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639091015550565b80610c2f816114e6565b915050610b27565b509695505050505050565b60006000198214610c545750806109c6565b6001600160a01b0383161580610c8657506001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b15610c925750476109c6565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015610cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfa9190611566565b9392505050565b6040516001600160a01b03831660248201526044810182905261037490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610f5f565b82610374576103748282610eca565b606081610dc45750506040805180820190915260018152600360fc1b602082015290565b6000825b8015610dee5781610dd8816114e6565b9250610de79050600a826115ab565b9050610dc8565b5060008167ffffffffffffffff811115610e0a57610e0a61157f565b6040519080825280601f01601f191660200182016040528015610e34576020820181803683370190505b509050815b8015610ec257610e4a600a866115bf565b610e559060306115d3565b60f81b82610e646001846115eb565b81518110610e7457610e746114ba565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610eae600a866115ab565b945080610eba81611602565b915050610e39565b509392505050565b6040805180820190915260068152654846756e647360d01b60208201528282604051602001610efb93929190611619565b60408051601f198184030181529082905262461bcd60e51b825261057f9160040161146a565b6040516001600160a01b0380851660248301528316604482015260648101829052610f599085906323b872dd60e01b90608401610d2d565b50505050565b6000610fb4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110449092919063ffffffff16565b8051909150156103745780806020019051810190610fd29190611679565b6103745760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161057f565b6060611053848460008561105b565b949350505050565b6060824710156110d35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161057f565b6001600160a01b0385163b61112a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161057f565b600080866001600160a01b03168587604051611146919061169b565b60006040518083038185875af1925050503d8060008114611183576040519150601f19603f3d011682016040523d82523d6000602084013e611188565b606091505b50915091506111988282866111a3565b979650505050505050565b606083156111b2575081610cfa565b8251156111c25782518084602001fd5b8160405162461bcd60e51b815260040161057f919061146a565b60008083601f8401126111ee57600080fd5b50813567ffffffffffffffff81111561120657600080fd5b6020830191508360208260051b850101111561122157600080fd5b9250929050565b6000806000806040858703121561123e57600080fd5b843567ffffffffffffffff8082111561125657600080fd5b611262888389016111dc565b9096509450602087013591508082111561127b57600080fd5b50611288878288016111dc565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b818110156112cc578351835292840192918401916001016112b0565b50909695505050505050565b6001600160a01b03811681146109ff57600080fd5b60008060006060848603121561130257600080fd5b833561130d816112d8565b9250602084013591506040840135611324816112d8565b809150509250925092565b6000806040838503121561134257600080fd5b823591506020830135611354816112d8565b809150509250929050565b60008060008060006060868803121561137757600080fd5b853567ffffffffffffffff8082111561138f57600080fd5b61139b89838a016111dc565b909750955060208801359150808211156113b457600080fd5b506113c1888289016111dc565b90945092505060408601356113d5816112d8565b809150509295509295909350565b6000602082840312156113f557600080fd5b5035919050565b6000806020838503121561140f57600080fd5b823567ffffffffffffffff81111561142657600080fd5b611432858286016111dc565b90969095509350505050565b60005b83811015611459578181015183820152602001611441565b83811115610f595750506000910152565b602081526000825180602084015261148981604085016020870161143e565b601f01601f19169190910160400192915050565b6000602082840312156114af57600080fd5b8135610cfa816112d8565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156114fa576114fa6114d0565b5060010190565b7f6572726f723a200000000000000000000000000000000000000000000000000081526000835161153981600785016020880161143e565b605f60f81b600791840191820152835161155a81600884016020880161143e565b01600801949350505050565b60006020828403121561157857600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6000826115ba576115ba611595565b500490565b6000826115ce576115ce611595565b500690565b600082198211156115e6576115e66114d0565b500190565b6000828210156115fd576115fd6114d0565b500390565b600081611611576116116114d0565b506000190190565b6000845161162b81846020890161143e565b605f60f81b908301908152845161164981600184016020890161143e565b6101d160f51b60019290910191820152835161166c81600384016020880161143e565b0160030195945050505050565b60006020828403121561168b57600080fd5b81518015158114610cfa57600080fd5b600082516116ad81846020870161143e565b919091019291505056fea164736f6c634300080a000a";

type HFundsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HFundsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HFunds__factory extends ContractFactory {
  constructor(...args: HFundsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<HFunds> {
    return super.deploy(overrides || {}) as Promise<HFunds>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): HFunds {
    return super.attach(address) as HFunds;
  }
  override connect(signer: Signer): HFunds__factory {
    return super.connect(signer) as HFunds__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HFundsInterface {
    return new utils.Interface(_abi) as HFundsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): HFunds {
    return new Contract(address, _abi, signerOrProvider) as HFunds;
  }
}
