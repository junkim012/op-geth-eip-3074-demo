/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../../common";
import type {
  HComptroller,
  HComptrollerInterface,
} from "../../../../contracts/handlers/compound/HComptroller";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "COMPTROLLER",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MSG_SENDER_KEY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NATIVE_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERCENTAGE_BASE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "POSTPROCESS_SIG",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "cache",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimComp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
    ],
    name: "claimComp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "postProcess",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stack",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610aeb806100206000396000f3fe6080604052600436106100bc5760003560e01c8063c272291611610074578063e9af02921161004e578063e9af0292146101eb578063f5f5ba72146101fe578063fa2901a51461023957600080fd5b8063c272291614610199578063dc9031c4146101a3578063df2ebdbb146101c357600080fd5b80635f82c67e116100a55780635f82c67e1461011057806387c139431461015057806399eb59b91461016c57600080fd5b80630f532d18146100c15780631bd85bdb14610108575b600080fd5b3480156100cd57600080fd5b506100f57fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a81565b6040519081526020015b60405180910390f35b6100f5610285565b34801561011c57600080fd5b50610138733d9819210a31b4961b30ef54be2aed79b9c9cd3b81565b6040516001600160a01b0390911681526020016100ff565b34801561015c57600080fd5b506100f5670de0b6b3a764000081565b34801561017857600080fd5b506100f561018736600461088d565b60016020526000908152604090205481565b6101a161052d565b005b3480156101af57600080fd5b506100f56101be36600461088d565b61057a565b3480156101cf57600080fd5b5061013873eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6100f56101f93660046108bb565b61059b565b34801561020a57600080fd5b50604080518082018252600c81526b2421b7b6b83a3937b63632b960a11b602082015290516100ff919061090f565b34801561024557600080fd5b50610254636139148b60e11b81565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100ff565b600080733d9819210a31b4961b30ef54be2aed79b9c9cd3b90506000816001600160a01b0316639d1b5a0a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103039190610942565b905060006103587fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60005260016020527fe066822ceb6294079ebca45035319f95ccb12306128dbdf5a257f0d1235733c95490565b6040516370a0823160e01b81526001600160a01b0380831660048301529192506000918416906370a0823190602401602060405180830381865afa1580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c8919061095f565b6040516374d7814960e11b81526001600160a01b0384811660048301529192509085169063e9af029290602401600060405180830381600087803b15801561040f57600080fd5b505af1925050508015610420575060015b6104a95761042c610978565b806308c379a0141561047d57506104416109cf565b8061044c575061047f565b610477604051806040016040528060098152602001680636c61696d436f6d760bc1b815250826107ee565b506104a9565b505b6104a9604051806040016040528060098152602001680636c61696d436f6d760bc1b81525061084b565b6040516370a0823160e01b81526001600160a01b038381166004830152600091908516906370a0823190602401602060405180830381865afa1580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610517919061095f565b90506105238282610a59565b9550505050505090565b60405162461bcd60e51b815260206004820152601460248201527f496e76616c696420706f73742070726f6365737300000000000000000000000060448201526064015b60405180910390fd5b6000818154811061058a57600080fd5b600091825260209091200154905081565b600080733d9819210a31b4961b30ef54be2aed79b9c9cd3b90506000816001600160a01b0316639d1b5a0a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190610942565b6040516370a0823160e01b81526001600160a01b0386811660048301529192506000918316906370a0823190602401602060405180830381865afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610689919061095f565b6040516374d7814960e11b81526001600160a01b0387811660048301529192509084169063e9af029290602401600060405180830381600087803b1580156106d057600080fd5b505af19250505080156106e1575060015b61076a576106ed610978565b806308c379a0141561073e57506107026109cf565b8061070d5750610740565b610738604051806040016040528060098152602001680636c61696d436f6d760bc1b815250826107ee565b5061076a565b505b61076a604051806040016040528060098152602001680636c61696d436f6d760bc1b81525061084b565b6040516370a0823160e01b81526001600160a01b038681166004830152600091908416906370a0823190602401602060405180830381865afa1580156107b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d8919061095f565b90506107e48282610a59565b9695505050505050565b60408051808201909152600c81526b2421b7b6b83a3937b63632b960a11b6020820152828260405160200161082593929190610a7e565b60408051601f198184030181529082905262461bcd60e51b82526105719160040161090f565b61088a816040518060400160405280600b81526020017f556e7370656369666965640000000000000000000000000000000000000000008152506107ee565b50565b60006020828403121561089f57600080fd5b5035919050565b6001600160a01b038116811461088a57600080fd5b6000602082840312156108cd57600080fd5b81356108d8816108a6565b9392505050565b60005b838110156108fa5781810151838201526020016108e2565b83811115610909576000848401525b50505050565b602081526000825180602084015261092e8160408501602087016108df565b601f01601f19169190910160400192915050565b60006020828403121561095457600080fd5b81516108d8816108a6565b60006020828403121561097157600080fd5b5051919050565b600060033d11156109915760046000803e5060005160e01c5b90565b601f8201601f1916810167ffffffffffffffff811182821017156109c857634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d10156109dd5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715610a0d57505050505090565b8285019150815181811115610a255750505050505090565b843d8701016020828501011115610a3f5750505050505090565b610a4e60208286010187610994565b509095945050505050565b600082821015610a7957634e487b7160e01b600052601160045260246000fd5b500390565b60008451610a908184602089016108df565b605f60f81b9083019081528451610aae8160018401602089016108df565b6101d160f51b600192909101918201528351610ad18160038401602088016108df565b016003019594505050505056fea164736f6c634300080a000a";

type HComptrollerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HComptrollerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HComptroller__factory extends ContractFactory {
  constructor(...args: HComptrollerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<HComptroller> {
    return super.deploy(overrides || {}) as Promise<HComptroller>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): HComptroller {
    return super.attach(address) as HComptroller;
  }
  override connect(signer: Signer): HComptroller__factory {
    return super.connect(signer) as HComptroller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HComptrollerInterface {
    return new utils.Interface(_abi) as HComptrollerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HComptroller {
    return new Contract(address, _abi, signerOrProvider) as HComptroller;
  }
}
